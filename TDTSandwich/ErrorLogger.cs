using System;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.IO;

namespace TDTSandwich
{
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //
  // Error logger
  // Logs errors in an error log file.
  //
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public class ErrorLogger
  {
    // Error codes specific to Arduino
    // Code offsets
    public const ushort OFFSET_ARDUINO          = 200; // Add 200 because all Arduino error codes start from 200
    public const ushort ERRCOUNT_ARDUINO_DEVICE = 30;  // Reserve 30 error codes for each device in the Arduino
    // This device list is used to refer to the device that created the error.
    public const ushort DEVICE_ARDUINO            = 0;  // The microcontroller itself
    public const ushort DEVICE_HEATER1TCAMPLIFIER = 1;  // TC amplifier for thermocouple on heater 1
    public const ushort DEVICE_HEATER2TCAMPLIFIER = 2;  // TC amplifier for thermocouple on heater 2
    public const ushort DEVICE_SAMPLETCAMPLIFIER  = 3;  // TC amplifier for sample thermocouple
    public const ushort DEVICE_UNKNOWN            = 4;  // Only used when the code is not written properly to account for all devices
    // Error codes for thermocouple amplifiers
    public const ushort ERR_ARDUINO_TCAMPLIFIER_CJRANGE = 0;
    public const ushort ERR_ARDUINO_TCAMPLIFIER_TCRANGE = 1;
    public const ushort ERR_ARDUINO_TCAMPLIFIER_CJHIGH  = 2;
    public const ushort ERR_ARDUINO_TCAMPLIFIER_CJLOW   = 3;
    public const ushort ERR_ARDUINO_TCAMPLIFIER_TCHIGH  = 4;
    public const ushort ERR_ARDUINO_TCAMPLIFIER_TCLOW   = 5;
    public const ushort ERR_ARDUINO_TCAMPLIFIER_OVUV    = 6;
    public const ushort ERR_ARDUINO_TCAMPLIFIER_OPEN    = 7;
    public const ushort ERR_ARDUINO_TCAMPLIFIER_UNKNOWN = 8;    // MAX31856 signalled a FAULT, but had nothing on the fault status registering explaining the fault
    public const ushort ERR_ARDUINO_TCAMPLIFIER_FORMAT  = 9;  // Received a temperature reading that cannot be converted to Double format

    // Error codes for C# program
    // General
    public const ushort ERR_PROG_GENERAL_PORT_ACCESS          = 100;
    public const ushort ERR_PROG_GENERAL_PORT_SETTINGS        = 101;
    public const ushort ERR_PROG_GENERAL_PORT_NAME            = 102;
    public const ushort ERR_PROG_GENERAL_PORT_STATE           = 103;
    public const ushort ERR_PROG_GENERAL_PORT_OPEN            = 104;
    public const ushort ERR_PROG_GENERAL_PORT_CANTCLOSE       = 105;
    public const ushort ERR_PROG_GENERAL_WRITER_ENCODING      = 110;
    public const ushort ERR_PROG_GENERAL_WRITER_ARG           = 111;
    public const ushort ERR_PROG_GENERAL_WRITER_CLOSED        = 112;
    public const ushort ERR_PROG_GENERAL_WRITER_FORMAT        = 113;
    public const ushort ERR_PROG_GENERAL_WRITER_IO            = 114;
    public const ushort ERR_PROG_GENERAL_PATH                 = 120;
    // Attempts to send commands
    public const ushort PROG_COMMAND_MAXATTEMPT               = 130;
    public const ushort PROG_COMMAND_FAIL                     = 131;
    public const ushort PROG_COMMAND_ERROR                    = 132;
    // Incoming messages from Arduino
    public const ushort ERR_PROG_REPLY_CORRUPT                = 150;
    public const ushort ERR_PROG_REPLY_CORRUPTCMD_START       = 151;
    public const ushort ERR_PROG_REPLY_CORRUPTCMD_END         = 152;
    public const ushort ERR_PROG_REPLY_CORRUPTCMD_UNKNOWNCMD  = 153;
    public const ushort ERR_PROG_REPLY_CORRUPTCMD_PARAM_LESS  = 154;
    public const ushort ERR_PROG_REPLY_CORRUPTCMD_PARAM_MORE  = 155;
    public const ushort ERR_PROG_REPLY_CORRUPTCMD_PARAM_NONE  = 156;
    public const ushort ERR_PROG_REPLY_CORRUPTCMD_UNKNOWN     = 157;


    // Other vars
    private bool errorLoggingActive_ = false;
    private readonly string errorLogLocation_;
    private ConcurrentQueue<string[]> errorLog_;

    public ErrorLogger(string errorLogLocation)
    {
        errorLogLocation_ = errorLogLocation;
        errorLog_ = new ConcurrentQueue<string[]>();
    }


    // Errors generated by the C# program (starts at 0, ends at 199)
    public void logCProgError(ushort error, Exception err, string message = "")
    {
        try
        {
            string errorPrefix = "  | C# Program | ";
            errorPrefix += "L" + getLineNumber(err) + " | ";
            errorPrefix += "E" + Convert.ToString(error) + " | ";

            queueError(error, errorPrefix, message);
        }
        catch (Exception)
        {
            // If the error file is opened by some other program, the Agenator program would not be able to write to it. This
            // exception catching is just to prevent unhandled exceptions. No handling will be done for this situations, so
            // the exception would not be logged.
        }
    }

    public void logCProgError(ushort error, string functionName, string message = "")
    {
        try
        {
            string errorPrefix = "  | C# Program | ";
            errorPrefix += "Function " + functionName + " | ";
            errorPrefix += "E" + Convert.ToString(error) + " | ";

            queueError(error, errorPrefix, message);
        }
        catch (Exception)
        {
            // If the error file is opened by some other program, the Agenator program would not be able to write to it. This
            // exception catching is just to prevent unhandled exceptions. No handling will be done for this situations, so
            // the exception would not be logged.
        }
    }

    // Errors sent by Arduino (starts at 200)
    public void logArduinoError(ushort error, int sandwichNumber, ushort device, string functionName, string rawMessage = "")
    {
      try
      {
        string errorPrefix = "  | Sandwich " + Convert.ToString(sandwichNumber).PadRight(2) + " | ";  // Pad the chamber number to match column width of C# program errors
        errorPrefix += "Function " + functionName + " | ";
        error += Convert.ToUInt16(OFFSET_ARDUINO + device * ERRCOUNT_ARDUINO_DEVICE);

        switch (device)
        {
          case DEVICE_ARDUINO:
            errorPrefix += "Arduino itself: ";
            break;
          case DEVICE_HEATER1TCAMPLIFIER:
            errorPrefix += "TC amplifier for heater 1.";
            break;
          case DEVICE_HEATER2TCAMPLIFIER:
            errorPrefix += "TC amplifier for heater 2: ";
            break;
          case DEVICE_SAMPLETCAMPLIFIER:
            errorPrefix += "TC amplifier for sample: ";
            break;
          case DEVICE_UNKNOWN:
          default:
            errorPrefix += "Unknown device: ";
            break;
        }

          // Put error on queue
        queueError(error, errorPrefix, rawMessage);
      }
      catch (Exception)
      {
          // If the error file is opened exclusively by some other program, then we cannot write to it. This
          // exception catching is just to prevent unhandled exceptions. No handling will be done for this situations, so
          // the error would not be logged.
      }
    }

    private void queueError(ushort error, string errorPrefix, string message = "")
    {
      try
      {
        string errorMsg;

        switch (error)
        {
          /************************************************
          * Errors generated within C# program            *
          * General                                       *
          ************************************************/
          case ERR_PROG_GENERAL_PORT_ACCESS:
            //Access is denied to the port.
            // -or -
            // The current process, or another process on the system, already has the specified COM port open either by a SerialPort instance or in unmanaged code.
            errorMsg = "Access denied to port or port opened by others.";
            break;
          case ERR_PROG_GENERAL_PORT_SETTINGS:
            // One or more of the properties for this instance are invalid.
            // For example, the Parity, DataBits, or Handshake properties are not valid values; the BaudRate is less than or equal to zero;
            // the ReadTimeout or WriteTimeout property is less than zero and is not InfiniteTimeout. 
            errorMsg = "Invalid argument for port settings.";
            break;
          case ERR_PROG_GENERAL_PORT_NAME:
            // The port name does not begin with "COM".
            // -or -
            // The file type of the port is not supported.
            errorMsg = "Invalid argument for port name.";
            break;
          case ERR_PROG_GENERAL_PORT_STATE:
            // The port is in an invalid state.
            // -or -
            // An attempt to set the state of the underlying port failed. For example, the parameters passed from this SerialPort object were invalid.
            errorMsg = "Port is or is trying to be set to invalid state.";
            break;
          case ERR_PROG_GENERAL_PORT_OPEN:
            // The specified port on the current instance of the SerialPort is already open.
            errorMsg = "Port is already open.";
            break;
          case ERR_PROG_GENERAL_PORT_CANTCLOSE:
            // Encountered a problem while closing a port.
            errorMsg = "Encountered an issue while closing a port.";
            break;
          case ERR_PROG_GENERAL_WRITER_ENCODING:
            // EncoderFallbackException	
            // The current encoding does not support displaying half of a Unicode surrogate pair.
            errorMsg = "CSVWriter encoding has an issue.";
            break;
          case ERR_PROG_GENERAL_WRITER_ARG:
            // ArgumentNullException	
            // format or arg is null.
            errorMsg = "CSVWriter format or arg is null: " + message;
            break;
          case ERR_PROG_GENERAL_WRITER_CLOSED:
            // ObjectDisposedException
            // The TextWriter is closed.
            errorMsg = "CSVWriter TextWriter stream is closed: " + message;
            break;
          case ERR_PROG_GENERAL_WRITER_FORMAT:
            // FormatException	
            // format is not a valid composite format string.
            // - or -
            // The index of a format item is less than 0(zero), or greater than or equal to the length of the arg array. 
            errorMsg = "CSVWriter has an invalid format string for writing: " + message;
            break;
          case ERR_PROG_GENERAL_WRITER_IO:
            // IOException
            // CSVWriter encountered an I/O error
            errorMsg = "CSVWriter encountered an I/O error";
            break;
          case ERR_PROG_GENERAL_PATH:
            // A group of exceptions thrown when trying to open the file path specified by the user
            errorMsg = "Error with file path: " + message;
            break;
          /************************************************
          * Attempts to send commands                     *
          ************************************************/
          case PROG_COMMAND_MAXATTEMPT:
            // Exceeded max retries for sending command to Arduino because all of them timed out.
            errorMsg = "Exceeded max attempts (all timed out) to send the command: " + message;
            break;
          case PROG_COMMAND_FAIL:
            // Command was received by Arduino, but failed to execute.
            errorMsg = "Arduino failed to execute the command: " + message;
            break;
          case PROG_COMMAND_ERROR:
            // Encountered an error while trying to deal with a command response.
            errorMsg = "Encountered an error while processing a command response. Command: " + message;
            break;
          /************************************************
          * Corrupted responses from Arduino              *
          ************************************************/
          case ERR_PROG_REPLY_CORRUPT:
            // Received a message from Arduino that is corrupt or isn't formatted correctly
            errorMsg = "Received a message from Arduino that is corrupt or isn't formatted correctly: " + message;
            break;
          case ERR_PROG_REPLY_CORRUPTCMD_START:
            // Received a message from Arduino that is corrupt or isn't formatted correctly
            errorMsg = "Arduino received a command without the start flag";
            break;
          case ERR_PROG_REPLY_CORRUPTCMD_END:
            // Received a message from Arduino that is corrupt or isn't formatted correctly
            errorMsg = "Arduino received a command without the end flag";
            break;
          case ERR_PROG_REPLY_CORRUPTCMD_UNKNOWNCMD:
            // Received a message from Arduino that uses an unknown command
            errorMsg = "Arduino received a command with unknown command type";
            break;
          case ERR_PROG_REPLY_CORRUPTCMD_PARAM_LESS:
            // Received a message from Arduino that is corrupt or isn't formatted correctly
            errorMsg = "Arduino received a command with less parameters than expected";
            break;
          case ERR_PROG_REPLY_CORRUPTCMD_PARAM_MORE:
            // Received a message from Arduino that is corrupt or isn't formatted correctly
            errorMsg = "Arduino received a command with more parameters than expected";
            break;
          case ERR_PROG_REPLY_CORRUPTCMD_PARAM_NONE:
            // Received a message from Arduino that is corrupt or isn't formatted correctly
            errorMsg = "Arduino received a command without parameters, even though they are expected.";
            break;
          case ERR_PROG_REPLY_CORRUPTCMD_UNKNOWN:
            // Received a message from Arduino that is corrupt or isn't formatted correctly
            errorMsg = "Arduino received a command with an unknown corruption type: " + message;
            break;
          /************************************************
          * Errors sent from Arduino                      *
          * Errors coming from Arduino itself             *
          ************************************************/
          /************************************************
          * Errors coming from devices of Arduino         *
          ************************************************/
          case OFFSET_ARDUINO + DEVICE_HEATER1TCAMPLIFIER * ERRCOUNT_ARDUINO_DEVICE + ERR_ARDUINO_TCAMPLIFIER_CJRANGE:
          case OFFSET_ARDUINO + DEVICE_HEATER2TCAMPLIFIER * ERRCOUNT_ARDUINO_DEVICE + ERR_ARDUINO_TCAMPLIFIER_CJRANGE:
          case OFFSET_ARDUINO + DEVICE_SAMPLETCAMPLIFIER * ERRCOUNT_ARDUINO_DEVICE + ERR_ARDUINO_TCAMPLIFIER_CJRANGE:
            errorMsg = "The Cold-Junction temperature is outside of the normal operating range.";
            break;
          case OFFSET_ARDUINO + DEVICE_HEATER1TCAMPLIFIER * ERRCOUNT_ARDUINO_DEVICE + ERR_ARDUINO_TCAMPLIFIER_TCRANGE:
          case OFFSET_ARDUINO + DEVICE_HEATER2TCAMPLIFIER * ERRCOUNT_ARDUINO_DEVICE + ERR_ARDUINO_TCAMPLIFIER_TCRANGE:
          case OFFSET_ARDUINO + DEVICE_SAMPLETCAMPLIFIER * ERRCOUNT_ARDUINO_DEVICE + ERR_ARDUINO_TCAMPLIFIER_TCRANGE:
            errorMsg = "The Thermocouple Hot Junction temperature is outside of the normal operating range.";
            break;
          case OFFSET_ARDUINO + DEVICE_HEATER1TCAMPLIFIER * ERRCOUNT_ARDUINO_DEVICE + ERR_ARDUINO_TCAMPLIFIER_CJHIGH:
          case OFFSET_ARDUINO + DEVICE_HEATER2TCAMPLIFIER * ERRCOUNT_ARDUINO_DEVICE + ERR_ARDUINO_TCAMPLIFIER_CJHIGH:
          case OFFSET_ARDUINO + DEVICE_SAMPLETCAMPLIFIER * ERRCOUNT_ARDUINO_DEVICE + ERR_ARDUINO_TCAMPLIFIER_CJHIGH:
            errorMsg = "The Cold-Junction temperature is higher than the user-defined cold-junction temperature high threshold.";
            break;
          case OFFSET_ARDUINO + DEVICE_HEATER1TCAMPLIFIER * ERRCOUNT_ARDUINO_DEVICE + ERR_ARDUINO_TCAMPLIFIER_CJLOW:
          case OFFSET_ARDUINO + DEVICE_HEATER2TCAMPLIFIER * ERRCOUNT_ARDUINO_DEVICE + ERR_ARDUINO_TCAMPLIFIER_CJLOW:
          case OFFSET_ARDUINO + DEVICE_SAMPLETCAMPLIFIER * ERRCOUNT_ARDUINO_DEVICE + ERR_ARDUINO_TCAMPLIFIER_CJLOW:
            errorMsg = "The Cold-Junction temperature is lower than the user-defined cold-junction temperature low threshold.";
            break;
          case OFFSET_ARDUINO + DEVICE_HEATER1TCAMPLIFIER * ERRCOUNT_ARDUINO_DEVICE + ERR_ARDUINO_TCAMPLIFIER_TCHIGH:
          case OFFSET_ARDUINO + DEVICE_HEATER2TCAMPLIFIER * ERRCOUNT_ARDUINO_DEVICE + ERR_ARDUINO_TCAMPLIFIER_TCHIGH:
          case OFFSET_ARDUINO + DEVICE_SAMPLETCAMPLIFIER * ERRCOUNT_ARDUINO_DEVICE + ERR_ARDUINO_TCAMPLIFIER_TCHIGH:
            errorMsg = "The Thermocouple Temperature is higher than the user-defined thermocouple temperature high threshold.";
            break;
          case OFFSET_ARDUINO + DEVICE_HEATER1TCAMPLIFIER * ERRCOUNT_ARDUINO_DEVICE + ERR_ARDUINO_TCAMPLIFIER_TCLOW:
          case OFFSET_ARDUINO + DEVICE_HEATER2TCAMPLIFIER * ERRCOUNT_ARDUINO_DEVICE + ERR_ARDUINO_TCAMPLIFIER_TCLOW:
          case OFFSET_ARDUINO + DEVICE_SAMPLETCAMPLIFIER * ERRCOUNT_ARDUINO_DEVICE + ERR_ARDUINO_TCAMPLIFIER_TCLOW:
            errorMsg = "Thermocouple temperature is lower than the user-defined thermocouple temperature low threshold.";
            break;
          case OFFSET_ARDUINO + DEVICE_HEATER1TCAMPLIFIER * ERRCOUNT_ARDUINO_DEVICE + ERR_ARDUINO_TCAMPLIFIER_OVUV:
          case OFFSET_ARDUINO + DEVICE_HEATER2TCAMPLIFIER * ERRCOUNT_ARDUINO_DEVICE + ERR_ARDUINO_TCAMPLIFIER_OVUV:
          case OFFSET_ARDUINO + DEVICE_SAMPLETCAMPLIFIER * ERRCOUNT_ARDUINO_DEVICE + ERR_ARDUINO_TCAMPLIFIER_OVUV:
            errorMsg = "The input voltage is negative or greater than VDD.";
            break;
          case OFFSET_ARDUINO + DEVICE_HEATER1TCAMPLIFIER * ERRCOUNT_ARDUINO_DEVICE + ERR_ARDUINO_TCAMPLIFIER_OPEN:
          case OFFSET_ARDUINO + DEVICE_HEATER2TCAMPLIFIER * ERRCOUNT_ARDUINO_DEVICE + ERR_ARDUINO_TCAMPLIFIER_OPEN:
          case OFFSET_ARDUINO + DEVICE_SAMPLETCAMPLIFIER * ERRCOUNT_ARDUINO_DEVICE + ERR_ARDUINO_TCAMPLIFIER_OPEN:
            errorMsg = "An open circuit such as broken thermocouple wires has been detected.";
            break;
          case OFFSET_ARDUINO + DEVICE_HEATER1TCAMPLIFIER * ERRCOUNT_ARDUINO_DEVICE + ERR_ARDUINO_TCAMPLIFIER_UNKNOWN:
          case OFFSET_ARDUINO + DEVICE_HEATER2TCAMPLIFIER * ERRCOUNT_ARDUINO_DEVICE + ERR_ARDUINO_TCAMPLIFIER_UNKNOWN:
          case OFFSET_ARDUINO + DEVICE_SAMPLETCAMPLIFIER * ERRCOUNT_ARDUINO_DEVICE + ERR_ARDUINO_TCAMPLIFIER_UNKNOWN:
            errorMsg = "MAX31856 signalled a FAULT, but had nothing on the fault status registering explaining the fault.";
            break;
          case OFFSET_ARDUINO + DEVICE_HEATER1TCAMPLIFIER * ERRCOUNT_ARDUINO_DEVICE + ERR_ARDUINO_TCAMPLIFIER_FORMAT:
          case OFFSET_ARDUINO + DEVICE_HEATER2TCAMPLIFIER * ERRCOUNT_ARDUINO_DEVICE + ERR_ARDUINO_TCAMPLIFIER_FORMAT:
          case OFFSET_ARDUINO + DEVICE_SAMPLETCAMPLIFIER * ERRCOUNT_ARDUINO_DEVICE + ERR_ARDUINO_TCAMPLIFIER_FORMAT:
            errorMsg = "Received a temperature reading that cannot be converted to Double: " + message;
            break;
          /************************************************
          * Unknown errors                                *
          ************************************************/
          case 999:
              // This is a safety net for any exceptions that I hadn't thought to catch. Helps prevent program from crashing due to uncaught exceptions.
              errorMsg = "Exception not programmed to be caught (yet): " + message;
              break;
          default:
              errorMsg = "Unknown error code";
              break;
        }

        // Put error on queue
        string[] errorFragments = { errorPrefix, errorMsg };
        errorLog_.Enqueue(errorFragments);
      }
      catch (Exception)
      {
          // If we had problem logging the error, we really can't do anything anymore. This
          // exception catching is just to prevent unhandled exceptions. No handling will be
          // done for this situation, so the exception would not be logged.
      }
    }

      // Obtain line number for easier debugging
      // NOTE: This requires the .PDB file to be in the same location as the .EXE file.
      public string getLineNumber(Exception err)
      {
          StackTrace st = new StackTrace(err, true);
          int line = st.GetFrame(st.FrameCount - 1).GetFileLineNumber();
          return Convert.ToString(line);
          //handleCProgError(999, String.Concat("Line ", Convert.ToString(line), ": ", err.Message));
      }

      // Handle unknown errors
      public void logUnknownError(Exception err)
      {
          logCProgError(999, err, err.Message);
      }

      // This should be run on its own thread.
      public void logErrors()
      {
          // Goes through the queue of errors to-be-logged and logs them.
          errorLoggingActive_ = true;

          while (errorLoggingActive_)
          {
              string[] errorFragments;

              // Check if there are any commands to be logged
              while (errorLog_.TryDequeue(out errorFragments))
              {
                  try
                  {
                      // Log the error
                      StreamWriter errorLogger = new StreamWriter(new FileStream(errorLogLocation_, FileMode.Append, FileAccess.Write, FileShare.Read)); // default encoding is UTF-8
                      errorLogger.Write("{0}{1}{2}{3}", new Object[] {  DateTime.Now.ToString(),
                                                                      errorFragments[0],
                                                                      errorFragments[1],
                                                                      Environment.NewLine });
                      errorLogger.Close();
                  }
                  catch (Exception)
                  {
                      // If we had problem logging the error, we really can't do anything anymore. This
                      // exception catching is just to prevent unhandled exceptions. No handling will be
                      // done for this situation, so the exception would not be logged.
                  }
              }

              System.Threading.Thread.Sleep(10);
          }
      }

      public void stopLoggingErrors()
      {
          errorLoggingActive_ = false;
      }
  }
}